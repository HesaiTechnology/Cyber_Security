#ifndef _POINTCLOUD_SIGNATURE_
#define _POINTCLOUD_SIGNATURE_

#include <hesai_security.h>

/**
 * storage the hmac key for point cloud signature, during this seession.
*/
struct session_hmac_key{
    session_key_st key;
    int initial;
};

/*------During the key negotiation process------*/
/**
 * session_get_random_number() - generate random.
 * @random: Store generated random number.
 * @return: 0 - success; 1 - error;
*/
int session_get_random_number(random_st *random);

/**
 * session_cal_session_key() - Key calculation using mutual random numbers exchanged by Lidar and client.
 * @random_lidar: lidar's random number.
 * @random_client: client's random number.
 * @sessionkey: generated session key, which is HMAC-SHA256 key.
 * @return: 0 - success; 1 - error;
*/
int session_cal_session_key(const random_st random_lidar, 
                            const random_st random_client, 
                            session_key_st *sessionkey);

/*-----PTCs for point cloud signature and authentication----*/
/**
 * ptcs_set_session_hmac_key() - Save the session key generated by this connection.
 * @session_key: the session key.
 * @return: 0-success; 1-error.
*/
int ptcs_set_session_hmac_key(const session_key_st session_key);                        

/**
 * ptcs_pointcloud_hmac_verify() - verify the message whether right.
 * @sessionkey: Session key for signing and verifying point cloud data.
 * @signedpc: Signed point cloud.
 * @signedpc_len: the length of @signedpc.
 * @pointcloud: the real point cloud. 
 *              If it is NULL, the @pointcloud and @pointcloud_len will be ignored. 
 * @pointcloud_len: the length of @pointcloud. 
 *              If it is NULL, the @pointcloud and @pointcloud_len will be ignored. 
 * @return: 0-success; 1-error.
*/
int ptcs_pointcloud_hmac_verify(const char *signedpc, const int signedpc_len, 
                                char *pointcloud, int *pointcloud_len);
#endif